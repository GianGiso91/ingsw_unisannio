apply plugin: 'com.android.application'
apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'pmd'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"
    defaultConfig {
        applicationId "unisannio.ingsoft.bbm"
        minSdkVersion 17
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
    }
}

configurations {
    compile.exclude group: "org.apache.httpcomponents", module: "httpclient"
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile group: 'com.google.api-client', name: 'google-api-client', version: '1.19.1'
    compile group: 'com.google.http-client', name: 'google-http-client-android', version: '1.22.0'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.0'
    compile project(path: ':backend', configuration: 'android-endpoints')
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    compile 'com.google.code.findbugs:jsr305:2.0.1'
    testCompile 'junit:junit:4.12'
    testCompile 'org.robolectric:robolectric:3.3.2'
}

checkstyle {
    toolVersion = "7.7"
}

task checkstyleMain(type: Checkstyle) {
    ignoreFailures = false
    showViolations = false
    source 'src/main', 'src/release', '../backend/src/main/java'
    include '**/*.java'
    exclude '**/gen/**'
    exclude '**/R.java'
    exclude '**/BuildConfig.java'
    reports {
        xml.destination "$project.buildDir/reports/checkstyle/main.xml"
    }
    classpath = files()
    configFile = file("${projectDir}/config/checkstyle/checkstyle.xml")
}

task checkstyleTest(type: Checkstyle) {
    ignoreFailures = false
    showViolations = false
    source 'src/androidTest', '../backend/src/test'
    include '**/*.java'
    exclude '**/gen/**'
    exclude '**/R.java'
    exclude '**/BuildConfig.java'
    reports {
        xml.destination "$project.buildDir/reports/checkstyle/test.xml"
    }
    classpath = files()
    configFile = file("${projectDir}/config/checkstyle/checkstyle.xml")
}

task checkstyleReport << {
    checkType = project.ext.get("checkType")
    if (file("$buildDir/reports/checkstyle/${checkType}.xml").exists()) {
        ant.xslt(in: "$project.buildDir/reports/checkstyle/${checkType}.xml",
                style: "${projectDir}/config/checkstyle/checkstyle-noframes-sorted.xsl",
                out: "$project.buildDir/reports/checkstyle/checkstyle_${checkType}.html"
        )
    }
}

task checkstyle(dependsOn: ['checkstyleMain', 'checkstyleTest']) {
    description 'Runs Checkstyle inspection against Android sourcesets.'
    group = 'Code Quality'
}

task findbugs(type: FindBugs) {
    ignoreFailures = true
    effort = "default"
    reportLevel = "medium"
    classes = files("${project.rootDir}/app/build/intermediates/classes")
    source = fileTree('src/main/java/')
    classpath = files()
    excludeFilter = file("${projectDir}/config/findbugs/excludeFilter.xml")
    reports {
        xml.enabled = false
        html.enabled = true
        xml {
            destination "$project.buildDir/reports/findbugs/findbugs-output.xml"
        }
        html {
            destination "$project.buildDir/reports/findbugs/findbugs-output.html"
        }
    }
    group = 'Code quality'
}

pmd {
    toolVersion = '5.5.1'
}

task pmd(type: Pmd) {
    ruleSetFiles = files("${projectDir}/config/pmd/pmd-ruleset.xml")
    ignoreFailures = true
    ruleSets = []


    source 'src', '../backend/src'
    include '**/*.java'
    exclude '**/gen/**'

    reports {
        xml.enabled = false
        html.enabled = true
        xml {
            destination "$project.buildDir/reports/pmd/pmd.xml"
        }
        html {
            destination "$project.buildDir/reports/pmd/pmd.html"
        }
    }

    group = 'Code Quality'
}